(function () {
  'use strict';

  const webhookUrl = 'https://discord.com/api/webhooks/1423018109564092457/0ZB9yAbNWodAVuCzhI8Renu2OzjTVhWQiuA84cUXRWVBWhptwO22wMBe8FC6XdfpplNC';
  let reportedIds = JSON.parse(localStorage.getItem('reportedAttackIds') || '[]');
  let lastCount = parseInt(localStorage.getItem('lastAttackCount') || '0');
  let isProcessing = false; // Egyszerre csak egy feldolgoz√°s

  function sendDiscordAlert(text) {
    fetch(webhookUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ content: text })
    }).catch(err => console.error('Discord alert hiba:', err));
  }

  function processAttacks(container) {
    console.log('T√°mad√°sok feldolgoz√°sa kezd≈ëdik...');
    const attacks = container.querySelectorAll('li.js-command-row[data-command_type^="attack"]');
    console.log(`√ñsszes t√°mad√°s elem: ${attacks.length}`);

    let newCount = 0;

    attacks.forEach((row, index) => {
      const id = row.id;
      console.log(`T√°mad√°s ${index + 1} - ID: ${id}`);

      if (reportedIds.includes(id)) {
        console.log(`T√°mad√°s ${id} m√°r jelentve volt`);
        return; // M√°r jelentett t√°mad√°s
      }

      console.log(`√öj t√°mad√°s feldolgoz√°sa: ${id}`);

      const towns = row.querySelectorAll('.gp_town_link');
      const attackerTown = towns[0]?.textContent.trim() || 'ismeretlen';
      const targetTown = towns[1]?.textContent.trim() || 'ismeretlen';
      const attacker = row.querySelector('.gp_player_link')?.textContent.trim() || 'ismeretlen';
      const eta = row.querySelector('.troops_arrive_at')?.textContent.replace(/[()]/g, '').trim() || 'id≈ëpont ismeretlen';

      const units = Array.from(row.querySelectorAll('.place_unit')).map(u => {
        const type = u.getAttribute('data-type');
        const num = u.querySelector('.place_unit_black')?.textContent.trim();
        return `${num} ${type}`;
      }).join(', ') || 'nincs adat';

      const type = row.dataset.command_type === 'attack_sea' ? '# üåä Tengeri' : '# ‚öîÔ∏è Sz√°razf√∂ldi';
        let a = Date.now();
        let b = Math.floor(a / 1000);
        let player = Game.player_name;
        const √∂sszesT√°mad√°s = attacks.length;
      const message = `${type} t√°mad√°s √©szlelve!\nüë§ **T√°mad√≥:** ${attacker}\nüèõÔ∏è **T√°mad√≥ v√°ros:** ‚û¢ ${attackerTown}\n**Ind√≠totta:** <t:${b}:F> ( <t:${b}:R> )\n\n\n\n**üë§ V√©dekez≈ë:** ${player}\nüéØ **V√©dekez≈ë v√°ros:** ‚û¢ ${targetTown}\nüïí **__√ârkez√©s:__** ${eta}\nüíÇ **Egys√©gek:** ${units}\n\n\n\n\n -----------------> üìä √ñsszes t√°mad√°s jelenleg: ${√∂sszesT√°mad√°s} db. | ${player} j√°t√©kosra! <-----------------\n\n || @everyone ||`;

      console.log('Discord √ºzenet k√ºld√©se:', message);
      sendDiscordAlert(message);
      reportedIds.push(id);
      newCount++;
    });

    if (newCount > 0) {
      localStorage.setItem('reportedAttackIds', JSON.stringify(reportedIds));
      console.log(`${newCount} √∫j t√°mad√°s jelentve Discord-ra`);
    } else {
      console.log('Nincs √∫j t√°mad√°s jelent√©sre');
    }

    return newCount;
  }

  function closeOverviewDialog() {
    console.log('Ablak bez√°r√°s kezd≈ëdik...');
    // Kis k√©sleltet√©s hogy a DOM friss√ºlj√∂n
    setTimeout(() => {
      const dialogs = document.querySelectorAll('body > div.ui-dialog');
      console.log(`√ñsszes dial√≥gus: ${dialogs.length}`);

      let closed = false;
      dialogs.forEach((dialog, index) => {
        const titlebar = dialog.querySelector('.ui-dialog-titlebar');
        const closeBtn = titlebar?.querySelector('button.ui-dialog-titlebar-close');
        const title = titlebar?.querySelector('.ui-dialog-title')?.textContent.trim();

        console.log(`Dial√≥gus ${index + 1} c√≠me: "${title}"`);

        if (closeBtn && title?.includes('√Åttekint≈ëk')) {
          console.log('‚úÖ √Åttekint≈ëk ablak bez√°r√°sa...');
          closeBtn.dispatchEvent(new MouseEvent('click', { bubbles: true, cancelable: true }));
          console.log('‚úÖ √Åttekint≈ëk ablak bez√°rva a val√≥di X gombbal.');
          closed = true;
        }
      });

      if (!closed) {
        console.log('‚ùå Nem siker√ºlt bez√°rni az √Åttekint≈ëk ablakot');
      }
    }, 1000);
  }

  function observeDropdownAndProcess() {
    console.log('Observer ind√≠t√°sa...');

    let attempts = 0;
    const maxAttempts = 20; // 10 m√°sodperc (500ms * 20)

    const checkForContent = () => {
      attempts++;
      console.log(`Tartalom ellen≈ërz√©s - k√≠s√©rlet ${attempts}`);

      // Keress√ºk az ui-dialog-ban a command_overview ul elemet
      const commandOverview = document.querySelector('#command_overview');
      if (!commandOverview) {
        console.log('command_overview nem tal√°lhat√≥');
        if (attempts < maxAttempts) {
          setTimeout(checkForContent, 500);
          return;
        } else {
          console.log('Timeout - command_overview nem tal√°lhat√≥');
          closeOverviewDialog();
          isProcessing = false;
          return;
        }
      }

      const rows = commandOverview.querySelectorAll('li.js-command-row[data-command_type^="attack"]');
      console.log(`Tal√°lt t√°mad√°s sorok: ${rows.length}`);

      if (rows.length > 0) {
        console.log('T√°mad√°sok feldolgoz√°sa...');
        const newAttacks = processAttacks(commandOverview);
        console.log(`√öj t√°mad√°sok: ${newAttacks}`);

        closeOverviewDialog();
        isProcessing = false;
        return;
      }

      // Ha m√©g nincs tartalom √©s van m√©g k√≠s√©rlet√ºnk
      if (attempts < maxAttempts) {
        setTimeout(checkForContent, 500);
      } else {
        console.log('Timeout - nem siker√ºlt bet√∂lteni a tartalmat');
        closeOverviewDialog(); // Bez√°rjuk az ablakot timeout eset√©n is
        isProcessing = false;
      }
    };

    // Kezdj√ºk az ellen≈ërz√©st kis k√©sleltet√©ssel
    setTimeout(checkForContent, 800);
  }

  function checkAttacks() {
    if (isProcessing) return; // M√°r fut egy ellen≈ërz√©s

    const countEl = document.querySelector('.attack_indicator .count.js-caption');
    if (!countEl) return;

    const currentCount = parseInt(countEl.textContent.trim() || '0');
    if (isNaN(currentCount)) return;

    // Csak ha n≈ëtt a t√°mad√°sok sz√°ma (cs√∂kken√©st figyelmen k√≠v√ºl hagyjuk)
    if (currentCount > lastCount) {
      console.log(`T√°mad√°sok sz√°ma n≈ëtt: ${lastCount} ‚Üí ${currentCount}`);
      isProcessing = true;

      // Megnyitjuk a t√°mad√°s dropdown-ot
      const indicator = document.querySelector('.attack_indicator .hover_state');

      if (indicator) {
        console.log('T√°mad√°s indik√°torra kattint√°s...');
        // Megnyitjuk a t√°mad√°s ablakot
        indicator.dispatchEvent(new MouseEvent('click', {
          bubbles: true,
          cancelable: true,
          view: window
        }));

        // Kis v√°r√°s ut√°n elkezd√ºk figyelni a bet√∂lt√∂tt tartalmat
        setTimeout(() => observeDropdownAndProcess(), 1000);
      } else {
        console.log('T√°mad√°s indik√°tor nem tal√°lhat√≥');
        isProcessing = false;
      }

      lastCount = currentCount;
      localStorage.setItem('lastAttackCount', String(currentCount));
    } else if (currentCount < lastCount) {
      // Ha cs√∂kkent, csak friss√≠tj√ºk a sz√°ml√°l√≥t (figyelmen k√≠v√ºl hagyjuk)
      console.log(`T√°mad√°sok sz√°ma cs√∂kkent: ${lastCount} ‚Üí ${currentCount} (figyelmen k√≠v√ºl hagyva)`);
      lastCount = currentCount;
      localStorage.setItem('lastAttackCount', String(currentCount));
    }
  }

  // Tiszt√≠t√°s r√©gi t√°mad√°s ID-k eset√©n (hetente egyszer)
  function cleanupOldAttackIds() {
    const lastCleanup = localStorage.getItem('lastCleanup');
    const now = Date.now();
    const oneWeek = 7 * 24 * 60 * 60 * 1000;

    if (!lastCleanup || (now - parseInt(lastCleanup)) > oneWeek) {
      reportedIds = []; // T√∂rlj√ºk a r√©gi ID-kat
      localStorage.setItem('reportedAttackIds', '[]');
      localStorage.setItem('lastCleanup', String(now));
      console.log('R√©gi t√°mad√°s ID-k t√∂r√∂lve');
    }
  }

  // Ind√≠t√°s
  setTimeout(() => {
    cleanupOldAttackIds();
    console.log('Grepolis T√°mad√°sfigyel≈ë elind√≠tva');

    // Els≈ë ellen≈ërz√©s
    checkAttacks();

    // Ism√©tl√©s 60 m√°sodpercenk√©nt
    setInterval(checkAttacks, 6000);
  }, 5000);
})();
