// Grepolis Auto Farm Collector - Core Script
// Ez a f√°jl ker√ºl GitHubra: farm_collector_core.js
// Verzi√≥: 1.0

(function() {
    'use strict';

    let isRunning = false;
    let intervalTimer = null;
    let nextCollectionTime = null;
    let countdownInterval = null;
    let selectedTime = 300;
    
    // J√°t√©kos n√©v a loader script-b≈ël
    const playerName = Game.player_name || 'Ismeretlen';

    const timeOptions = {
        300: '5 perc',
        1200: '20 perc',
        5400: '1.5 √≥ra',
        14400: '4 √≥ra'
    };

    // UI l√©trehoz√°sa
    function createUI() {
        const ui = document.createElement('div');
        ui.id = 'auto-farm-collector-ui';
        ui.innerHTML = `
            <div class="ui-header">
                <span class="ui-title">üåæ Auto Sarcol√°s</span>
                <span class="ui-drag-handle">‚ãÆ‚ãÆ</span>
            </div>
            <div class="ui-content">
                <div class="license-info">
                    <span class="license-icon">‚úì</span>
                    <span class="license-text">Licencelve: ${playerName}</span>
                </div>
                <div class="time-options">
                    <div class="section-title">Sarcol√°si gyakoris√°g:</div>
                    <label><input type="radio" name="time" value="300" checked> üïê 5 perc</label>
                    <label><input type="radio" name="time" value="1200"> üïê 20 perc</label>
                    <label><input type="radio" name="time" value="5400"> üïê 1.5 √≥ra</label>
                    <label><input type="radio" name="time" value="14400"> üïê 4 √≥ra</label>
                </div>
                <div class="control-buttons">
                    <button id="start-btn" class="btn btn-start">‚ñ∂ Start</button>
                    <button id="stop-btn" class="btn btn-stop" disabled>‚è∏ Stop</button>
                </div>
                <div class="status-box">
                    <div class="status-row">
                        <span class="label">St√°tusz:</span>
                        <span id="status" class="value">Le√°ll√≠tva</span>
                    </div>
                    <div class="status-row">
                        <span class="label">K√∂vetkez≈ë:</span>
                        <span id="countdown" class="value countdown">--:--:--</span>
                    </div>
                    <div class="status-row" id="last-collection-row" style="display: none;">
                        <span class="label">Utols√≥:</span>
                        <span id="last-collection" class="value small">-</span>
                    </div>
                </div>
                K√©sz√≠tette: bArNNNi | 2025
            </div>
        `;

        const style = document.createElement('style');
        style.textContent = `
            #auto-farm-collector-ui {
                position: fixed;
                top: 100px;
                right: 20px;
                width: 300px;
                background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
                border: 2px solid #f39c12;
                border-radius: 10px;
                box-shadow: 0 8px 32px rgba(0,0,0,0.5);
                z-index: 10000;
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                display: none;
                overflow: hidden;
            }
            #auto-farm-collector-ui.visible {
                display: block;
                animation: slideInRight 0.4s ease-out;
            }
            @keyframes slideInRight {
                from {
                    transform: translateX(100%);
                    opacity: 0;
                }
                to {
                    transform: translateX(0);
                    opacity: 1;
                }
            }
            .ui-header {
                background: linear-gradient(135deg, #f39c12 0%, #e67e22 100%);
                padding: 12px 15px;
                cursor: move;
                display: flex;
                justify-content: space-between;
                align-items: center;
                box-shadow: 0 2px 10px rgba(0,0,0,0.2);
            }
            .ui-title {
                color: white;
                font-weight: bold;
                font-size: 15px;
                text-shadow: 1px 1px 2px rgba(0,0,0,0.3);
            }
            .ui-drag-handle {
                color: rgba(255,255,255,0.8);
                font-size: 20px;
                cursor: move;
                user-select: none;
            }
            .ui-content {
                padding: 16px;
            }
            .license-info {
                background: linear-gradient(135deg, rgba(39, 174, 96, 0.2) 0%, rgba(46, 204, 113, 0.2) 100%);
                border: 1px solid rgba(39, 174, 96, 0.5);
                border-radius: 6px;
                padding: 10px 12px;
                margin-bottom: 16px;
                display: flex;
                align-items: center;
                gap: 8px;
            }
            .license-icon {
                color: #2ecc71;
                font-size: 16px;
                font-weight: bold;
            }
            .license-text {
                color: #2ecc71;
                font-size: 12px;
                font-weight: 600;
                flex: 1;
            }
            .section-title {
                color: #f39c12;
                font-size: 12px;
                font-weight: bold;
                margin-bottom: 10px;
                text-transform: uppercase;
                letter-spacing: 0.5px;
            }
            .time-options {
                margin-bottom: 16px;
            }
            .time-options label {
                display: block;
                color: #ecf0f1;
                margin-bottom: 10px;
                cursor: pointer;
                font-size: 13px;
                padding: 8px 10px;
                background: rgba(255,255,255,0.05);
                border-radius: 5px;
                transition: all 0.2s;
                border: 1px solid transparent;
            }
            .time-options label:hover {
                background: rgba(243, 156, 18, 0.15);
                border-color: rgba(243, 156, 18, 0.3);
            }
            .time-options input[type="radio"] {
                margin-right: 10px;
                cursor: pointer;
                accent-color: #f39c12;
            }
            .time-options input[type="radio"]:checked + label,
            .time-options label:has(input:checked) {
                background: rgba(243, 156, 18, 0.2);
                border-color: #f39c12;
                font-weight: 600;
            }
            .control-buttons {
                display: flex;
                gap: 10px;
                margin-bottom: 16px;
            }
            .btn {
                flex: 1;
                padding: 10px;
                border: none;
                border-radius: 6px;
                cursor: pointer;
                font-weight: bold;
                font-size: 13px;
                transition: all 0.3s;
                box-shadow: 0 2px 8px rgba(0,0,0,0.2);
            }
            .btn-start {
                background: linear-gradient(135deg, #27ae60 0%, #2ecc71 100%);
                color: white;
            }
            .btn-start:hover:not(:disabled) {
                background: linear-gradient(135deg, #229954 0%, #27ae60 100%);
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(39, 174, 96, 0.4);
            }
            .btn-stop {
                background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
                color: white;
            }
            .btn-stop:hover:not(:disabled) {
                background: linear-gradient(135deg, #c0392b 0%, #a93226 100%);
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(231, 76, 60, 0.4);
            }
            .btn:disabled {
                opacity: 0.5;
                cursor: not-allowed;
                transform: none !important;
            }
            .btn:active:not(:disabled) {
                transform: translateY(0) !important;
            }
            .status-box {
                background: rgba(0,0,0,0.3);
                padding: 12px;
                border-radius: 6px;
                border: 1px solid rgba(255,255,255,0.1);
            }
            .status-row {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 8px;
                font-size: 12px;
            }
            .status-row:last-child {
                margin-bottom: 0;
            }
            .status-row .label {
                color: rgba(236, 240, 241, 0.7);
                font-weight: 500;
            }
            .status-row .value {
                color: #f39c12;
                font-weight: bold;
                font-size: 13px;
            }
            .status-row .value.small {
                font-size: 11px;
            }
            .status-row .value.countdown {
                font-family: 'Courier New', monospace;
                font-size: 14px;
                letter-spacing: 1px;
            }
            #status.running {
                color: #2ecc71;
            }
            #status.error {
                color: #e74c3c;
            }
        `;
        document.head.appendChild(style);
        document.body.appendChild(ui);

        makeDraggable(ui);
        attachEventListeners();
    }

    // Draggable funkci√≥
    function makeDraggable(element) {
        let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
        const header = element.querySelector('.ui-header');

        header.onmousedown = dragMouseDown;

        function dragMouseDown(e) {
            e.preventDefault();
            pos3 = e.clientX;
            pos4 = e.clientY;
            document.onmouseup = closeDragElement;
            document.onmousemove = elementDrag;
        }

        function elementDrag(e) {
            e.preventDefault();
            pos1 = pos3 - e.clientX;
            pos2 = pos4 - e.clientY;
            pos3 = e.clientX;
            pos4 = e.clientY;
            element.style.top = (element.offsetTop - pos2) + "px";
            element.style.left = (element.offsetLeft - pos1) + "px";
            element.style.right = "auto";
        }

        function closeDragElement() {
            document.onmouseup = null;
            document.onmousemove = null;
        }
    }

    // Event listener-ek
    function attachEventListeners() {
        document.querySelectorAll('input[name="time"]').forEach(radio => {
            radio.addEventListener('change', (e) => {
                selectedTime = parseInt(e.target.value);
                console.log(`‚è±Ô∏è √öj id≈ëintervallum: ${timeOptions[selectedTime]}`);
            });
        });

        document.getElementById('start-btn').addEventListener('click', startCollection);
        document.getElementById('stop-btn').addEventListener('click', stopCollection);
    }

    // Sarcol√°s v√©grehajt√°sa
    function performCollection() {
        try {
            updateStatus('Sarcol√°s...', 'running');

            // 1. V√°rosok kiv√°laszt√°sa
            const selectAllCheckbox = document.querySelector('.checkbox.select_all');
            if (selectAllCheckbox && !selectAllCheckbox.classList.contains('checked')) {
                selectAllCheckbox.click();
                console.log('‚úì V√°rosok kiv√°lasztva');
            }

            // 2. Id≈ë opci√≥ kiv√°laszt√°sa
            setTimeout(() => {
                const timeCheckbox = document.querySelector(`.fto_time_checkbox.fto_${selectedTime}`);
                if (timeCheckbox && !timeCheckbox.classList.contains('active')) {
                    const checkbox = timeCheckbox.querySelector('.checkbox');
                    if (checkbox) {
                        checkbox.click();
                        console.log(`‚úì ${timeOptions[selectedTime]} kiv√°lasztva`);
                    }
                }

                // 3. Begy≈±jt√©s gomb megnyom√°sa
                setTimeout(() => {
                    const claimButton = document.getElementById('fto_claim_button');
                    if (claimButton) {
                        claimButton.click();
                        console.log('‚úì Sarcol√°s v√©grehajtva');
                        updateStatus('Fut√°s...', 'running');
                        updateLastCollection();
                    } else {
                        updateStatus('Hiba: Gomb nem tal√°lhat√≥', 'error');
                        console.error('‚ùå Begy≈±jt√©s gomb nem tal√°lhat√≥');
                    }
                }, 500);
            }, 500);

        } catch (error) {
            console.error('‚ùå Hiba a sarcol√°s sor√°n:', error);
            updateStatus('Hiba t√∂rt√©nt', 'error');
        }
    }

    // St√°tusz friss√≠t√©se
    function updateStatus(text, className = '') {
        const statusElement = document.getElementById('status');
        if (statusElement) {
            statusElement.textContent = text;
            statusElement.className = 'value ' + className;
        }
    }

    // Utols√≥ sarcol√°s idej√©nek friss√≠t√©se
    function updateLastCollection() {
        const now = new Date();
        const timeString = now.toLocaleTimeString('hu-HU');
        const lastCollectionElement = document.getElementById('last-collection');
        const lastCollectionRow = document.getElementById('last-collection-row');
        
        if (lastCollectionElement && lastCollectionRow) {
            lastCollectionElement.textContent = timeString;
            lastCollectionRow.style.display = 'flex';
        }
    }

    // Visszasz√°ml√°l√°s friss√≠t√©se
    function updateCountdown() {
        const countdownElement = document.getElementById('countdown');
        if (!countdownElement || !nextCollectionTime) return;

        const now = Date.now();
        const remaining = nextCollectionTime - now;

        if (remaining <= 0) {
            countdownElement.textContent = '00:00:00';
            return;
        }

        const hours = Math.floor(remaining / 3600000);
        const minutes = Math.floor((remaining % 3600000) / 60000);
        const seconds = Math.floor((remaining % 60000) / 1000);

        countdownElement.textContent = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }

    // K√∂vetkez≈ë sarcol√°s √ºtemez√©se
    function scheduleNextCollection() {
        const randomDelay = Math.floor(Math.random() * (220 - 30 + 1)) + 30;
        const totalDelay = (selectedTime + randomDelay) * 1000;
        
        nextCollectionTime = Date.now() + totalDelay;
        
        const nextTime = new Date(nextCollectionTime);
        const minutes = Math.floor((selectedTime + randomDelay) / 60);
        const seconds = (selectedTime + randomDelay) % 60;
        
        console.log(`‚è∞ K√∂vetkez≈ë sarcol√°s: ${nextTime.toLocaleTimeString()} (${minutes}p ${seconds}s)`);
        
        intervalTimer = setTimeout(() => {
            performCollection();
            scheduleNextCollection();
        }, totalDelay);
    }

    // Start funkci√≥
    function startCollection() {
        if (isRunning) return;
        
        isRunning = true;
        document.getElementById('start-btn').disabled = true;
        document.getElementById('stop-btn').disabled = false;
        
        console.log('‚ñ∂Ô∏è Auto sarcol√°s elind√≠tva');
        console.log(`‚öôÔ∏è Be√°ll√≠tott id≈ëintervallum: ${timeOptions[selectedTime]}`);
        
        updateStatus('Ind√≠t√°s...', 'running');
        
        // Els≈ë sarcol√°s azonnal
        performCollection();
        
        // K√∂vetkez≈ë √ºtemez√©se
        setTimeout(() => {
            scheduleNextCollection();
        }, 2000);
        
        // Visszasz√°ml√°l√°s ind√≠t√°sa
        countdownInterval = setInterval(updateCountdown, 1000);
    }

    // Stop funkci√≥
    function stopCollection() {
        if (!isRunning) return;
        
        isRunning = false;
        document.getElementById('start-btn').disabled = false;
        document.getElementById('stop-btn').disabled = true;
        
        if (intervalTimer) {
            clearTimeout(intervalTimer);
            intervalTimer = null;
        }
        
        if (countdownInterval) {
            clearInterval(countdownInterval);
            countdownInterval = null;
        }
        
        nextCollectionTime = null;
        updateStatus('Le√°ll√≠tva');
        document.getElementById('countdown').textContent = '--:--:--';
        
        console.log('‚è∏Ô∏è Auto sarcol√°s le√°ll√≠tva');
    }

    // UI megjelen√≠t√©s√©nek ellen≈ërz√©se
    function checkUIVisibility() {
        const farmTownWrapper = document.getElementById('fto_town_wrapper');
        const ui = document.getElementById('auto-farm-collector-ui');
        
        if (farmTownWrapper && ui) {
            ui.classList.add('visible');
        } else if (ui) {
            ui.classList.remove('visible');
            // Ha bez√°rt√°k az ablakot, √°ll√≠tsuk le a sarcol√°st
            if (isRunning) {
                console.log('‚ö†Ô∏è Sarcol√°si ablak bez√°rva, le√°ll√≠t√°s...');
                stopCollection();
            }
        }
    }

    // Inicializ√°l√°s
    function init() {
        console.log('='.repeat(50));
        console.log('üåæ Auto Farm Collector - Core Script');
        console.log('üë§ Felhaszn√°l√≥:', playerName);
        console.log('='.repeat(50));
        
        createUI();
        
        // UI l√°that√≥s√°g ellen≈ërz√©se
        setInterval(checkUIVisibility, 1000);
        
        console.log('‚úÖ UI l√©trehozva √©s k√©szen √°ll a haszn√°latra');
    }

    // Ind√≠t√°s
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        init();
    }

})();
